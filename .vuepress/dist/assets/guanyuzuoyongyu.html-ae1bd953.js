import{_ as s,o as a,c as e,f as c,a as n}from"./app-ec29cce2.js";const o={},p=n('<h2 id="什么是作用域" tabindex="-1"><a class="header-anchor" href="#什么是作用域" aria-hidden="true">#</a> 什么是作用域</h2><h3 id="js-编译过程" tabindex="-1"><a class="header-anchor" href="#js-编译过程" aria-hidden="true">#</a> js 编译过程</h3><p>一般情况下,语言的编译过程大致分为三步:</p><ul><li>分词/词法分析:将写的代码打断成一个个的片段,片段称为 <code>token(记号)</code></li><li>解析: 解析这些片段并生成一个嵌套元素的树(抽象语法树(<code>AST</code>))</li><li>代码生成:将抽象语法树转换为可执行代码(不同语言,不同环境有所差异)</li></ul><p>那么<code>var hello = 123</code>执行过程大致是:</p><ul><li>将<code>var</code> <code>hello</code> <code>=</code> <code>123</code> 拆分为一个个的代码片段</li><li>然后将<code>var hello = &quot;helloworld&quot;</code>生成一棵树,开始于顶层是有一个叫<code>VariableDeclaration</code>(变量声明)的节点,带有一个<code>Identifier</code>(标识符)和<code>AssignmentExpression</code>(赋值表达式)的两个子节点,而<code>AssignmentExpression</code>节点带着一个<code>NumericLiteral</code>(数字字面量)的子节点</li><li>大致是生成机器指令,创建一个叫<code>hello</code>的表变量,然后在<code>hello</code>中存入一个值</li></ul><p>其实在 js 执行中,远比这几步复杂.</p><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3>',8),t=n(`<p>但是在我们定义一个变量的过程中,编译器会让作用域去查找是否有这个变量,有的话就继续执行,没有的话就定义这个变量,生成代码后,引擎会让作用域查找有没有要使用的变量存在,如果没有就会查找其他的作用域,找到的话就会使用,没有找到的话就会抛出一个错误 当我们执行<code> var hello = 2</code>时会进行一个<code>LHS</code>查询,同样的还有<code>RHS</code>查询 我们以赋值操作为基准,分了左边和右边</p><ul><li><code>LHS(Left-hand Side)</code>查询:从赋值操作左手边开始查询,理解为取得变量(获取的变量的源)</li><li><code>RHS(Right-hand Side)</code>查询:从赋值操作右手边开始查询,理解为取得变量的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>hello <span class="token operator">=</span> <span class="token number">321</span> <span class="token comment">// LHS查询,查找hello,将321赋值给他</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span> <span class="token comment">// RHS查询,查找hello这个变量的值,并输出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
  b <span class="token operator">=</span> a
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在执行的时候,变量<code>b</code>先进行<code>RHS</code>查询,但在作用域里他是找不到的,所以引擎抛出<code>ReferenceError</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  b <span class="token operator">=</span> a
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>windows<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比之下这一段代码在执行<code>b</code>的时候先进行<code>LHS</code>查询,<em>如果在作用域(到达顶层作用域(全局作用域))里没有找到,则会在全局作用域中定义它</em>,并把它交给引擎执行,但例外的是如果在 <code>Strict</code>模式下,依然会抛出<code>ReferenceError</code>错误</p><h2 id="词法作用域" tabindex="-1"><a class="header-anchor" href="#词法作用域" aria-hidden="true">#</a> 词法作用域</h2><p>词法作用域简单来说就是 js 编译器在执行词法分析(编译过程成的第一步)时被定义的作用域</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span>

  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">bar</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 2 4 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码,他有三个作用域</p><ul><li>全局作用域</li><li>foo 作用域</li><li>bar 作用域</li></ul><p>在进行变量查找时,一旦找到第一个匹配,就会停止作用域查询 引擎 执行语句 <code>console.log(..)</code> 并开始查找三个被引用的变量<code> a</code>,<code>b</code> 和<code>c</code> .它首先从最内部的作用域气泡开始,也就是<code> bar(..)</code> 函数的作用域.在这里它找不到 <code>a</code>,所以它向上走一层,到外面下一个最近的作用域气泡,<code>foo(..)</code> 的作用域.它在这里找到了 <code>a</code>,于是它就使用这个 <code>a</code>.同样的事情也发生在 <code>b</code> 身上.但是对于 <code>c</code>,它在 <code>bar(..)</code> 内部就找到了</p><h2 id="函数与块儿作用域" tabindex="-1"><a class="header-anchor" href="#函数与块儿作用域" aria-hidden="true">#</a> 函数与块儿作用域</h2><p>其实在 javascript 中所有的函数都是一个作用域,在一个函数内部声明一个变量或者函数,实质上是对外界隐藏的,但是函数并非是唯一的作用域单位,还有一个名为块级作用域的的作用域单位,通俗讲就是变量和函数属于任意代码块,而不是仅仅属于外面的函数 常见的代码块像是:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token number">2</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: err is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像是<code>err</code>只能作用在<code>catch</code>这个块级作用域中,在外面是访问不到的 并且不管是函数作用还是块级作用域,他们有一个相同的规则 :在一个作用域中声明的任何变量都附着在这个作用域上</p><h2 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h2><p>先说结论是先有声明,再有赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> a

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一段代码是当引擎编译代码的时候,会将变量的声明提前定义,并将他们关联在合适的作用域上,所以才会输出 2,他看起来像是这样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a
a <span class="token operator">=</span> <span class="token number">1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二段代码则是因为<code>var a </code>提前了,赋值操作还停留在原地</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token comment">// 此时a的值是undefined</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且变量提升是以作用域为单位的,</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>

  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处是因为<code>var a </code> 被提升到了函数<code>foo</code>的顶部,所以会是<code>undefined</code>,结合之前的知识,代码的运行其实是这样的:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>

  a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个需要注意的细节就是 <em>当有多个变量或者函数被声明的时候,函数声明的优先级是大于变量声明的</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token keyword">var</span> foo

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1 被打印了,而不是 2,这个代码段被 引擎 解释执行为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个很小的细节是 <em>当一个函数在普通的代码块被定义的时候,他是会被提升到外围的作用域的</em></p>`,35);function i(l,u){return a(),e("div",null,[p,c(" 在 js 执行过程中,我们都知道如果在当前执行的作用域中没有某个变量,则会去外部作用域查找是否有当前变量 "),t])}const r=s(o,[["render",i],["__file","guanyuzuoyongyu.html.vue"]]);export{r as default};

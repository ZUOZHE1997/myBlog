import{_ as p,r as e,o,c,b as n,d as s,e as t,a as i}from"./app-ec29cce2.js";const l="/js/await.png",u="/js/await2.png",r={},k={href:"https://es6.ruanyifeng.com/#docs/async",target:"_blank",rel:"noopener noreferrer"},d={href:"https://segmentfault.com/a/1190000007535316",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"第一次写文章,可能会有语句不通顺或者有些理解错误的地方,也请多多指正,多多批评 😄",-1),v=n("h3",{id:"_1-关于同步与异步",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-关于同步与异步","aria-hidden":"true"},"#"),s(" 1.关于同步与异步")],-1),b={href:"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html",target:"_blank",rel:"noopener noreferrer"},y=i(`<h2 id="_2-promise" tabindex="-1"><a class="header-anchor" href="#_2-promise" aria-hidden="true">#</a> 2.Promise</h2><p>第一次接触 Promise 时是去年学 Vue 的时用到的 Axios 库,里面的方法封装好了直接用的时候就是下面这种方法,后来在补习基础以及 ES6 是才知道这原来是用 Promise 封装的,但是碍于脑子笨没怎么理解,就还是只是会用,到前段时间在看的时候有那么一点点理解了.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
services
    <span class="token punctuation">.</span><span class="token function">getinfo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Promise 是异步编程的一个解决方案,它有三个状态,<code>pending</code>（正在进行）、<code>fulfilled</code>（执行成功）和<code>rejected</code>（执行失败),而且只有两种状态:A:正在进行==&gt;执行成功 B:正在进行==&gt;执行失败且状态一旦发生变化,就不会再继续变了,成功就是成了,失败就是失败了,不会再去发生变化,这种结果会一直持续到任务结束.而且在执行过程中是无法取消的.用法上 Promise 是一个构造函数,可以用<code>new</code>关键字来创建一个 Promise 对象,它接受两个函数参数,分别是<code>resolve</code>和<code>reject</code>,</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//接受两个参数 resolve, reject</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行一个异步操作</span>
    num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token comment">// 生成一个随机数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 如果符合条件,就将Promise的状态从正在执行变为执行成功</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 如果不符合条件就会将状态由正在执行变为执行失败</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
myPromise
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// then用于为Promise实例添加状态改变时的回调</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// catch用于指定发生错误时的回调</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>换句话说就是执行成功就在执行 then 方法,执行失败就去执行 catch 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
myPromise
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 注意!!</span>
<span class="token comment">//执行结果是</span>
<span class="token comment">//1</span>
<span class="token comment">//7.696298823399228</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 myPromise 创建完后立即执行,但是因为是异步的, <code>then</code>方法指定的回调函数将在当前脚本所有同步任务执行完后才会执行,所以才会最后输出随机数在网页的图片加载时,我们往往用的都是异步的,在执行 JS 时会去发送请求,等到主线程执行完了,图片也请求完了那么图片就会显示了.我对<code>Promise</code>的理解的可能不是特别的深,所以请见谅.</p><p>Promise 的缺点</p><ol><li>无法取消<code>Promise</code>,一旦新建它就会立即执行,无法中途取消</li><li>如果不设置回调函数,<code>Promise</code>内部抛出的错误,不会反应到外部</li><li>当处于<code>Pending</code>状态时,无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</li></ol><h2 id="_3-async-与-await" tabindex="-1"><a class="header-anchor" href="#_3-async-与-await" aria-hidden="true">#</a> 3.async 与 await</h2><p>async 其实就是异步(asynchronous)</p><blockquote><p><code>async</code>函数返回一个 Promise 对象,可以使用<code>then</code>方法添加回调函数 （它就是 Generator 函数的语法糖） 当函数执行的时候,一旦遇到<code>await</code>就会先返回,等到异步操作完成,再接着执行函数体内后面的语句</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;helloworld&#39;</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:<img src="`+l+`" alt="image.png">可以发现,<code>async</code>函数返回的是一个 Promise 对象,而且 async 函数中的 return 的返回值可以做为 Promise 中 then 方法的回调的参数,如果抛出了异常,也可用 catch 方法来处理,且只有<code>async</code>函数内部的异步操作执行完,才会执行<code>then</code>方法指定的回调函数.既然 async 返回了一个 Promise 对象,那么 await 的作用是什么呢?正常情况下,<code>await</code>命令后面是一个 Promise 对象,返回该对象的结果.如果不是 Promise 对象,就直接返回对应的值.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token string">&#39;tom&#39;</span>
<span class="token punctuation">}</span>
fun<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// tom</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>await 后面的值并不一定是一个 Promise 对象,也就是说,如果 await 后面的不是一个 Promise 对象,那么这个值就是要&quot;等待&quot;的处理结果加了 await 之后,await 后面的语句都会变成同步的,按照顺序来执行语句,</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myPromise</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">myPromise</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">myPromise</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">myPromise</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;is end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//1,2,3</span>
<span class="token comment">//is end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是还有一点要注意是在 await 后面的异步语句如果抛出异常,就会时整个函数中断执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//把上面的代码进行修改</span>
<span class="token keyword">const</span> <span class="token function-variable function">myPromis</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">myPromis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;is end &#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果:<img src="`+u+`" alt="image.png">结果是 3.75 小于 5,执行 reject,抛出异常,但是可以用 try...catch...来改写<code>fun()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">myPromis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 大于5执行try语句</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 小于五抛出异常执行catch语句</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    a <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;is end &#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说 ssync 与 await 就是可以简化 Promise,使其更直观的但要注意 async 与 await 的使用:</p><ul><li>await 关键字必须位于 async 函数内部</li><li>不能在普通箭头函数中使用 await 关键字,需要在箭头函数前面添加 async</li></ul>`,24);function f(g,w){const a=e("ExternalLinkIcon");return o(),c("div",null,[n("blockquote",null,[n("blockquote",null,[n("p",null,[s("最近关于 Promise 看了好一些文章来阐述用途,再加上异步编程和 async 与 await 的用法弄的属实头大,但是看了好几遍之后感觉有点上道了,然后抓紧吧我知道的理解的记录下来了,我在这里只是阐述我对 Promise 和 async 的一些理解,关于 promise 和 async 的更多细节可以去查看阮一峰老师的"),n("a",k,[s("ES6 入门"),t(a)]),s(",或者边城老师的"),n("a",d,[s("理解 JavaScript 的 async/await"),t(a)])])])]),m,v,n("p",null,[s("js 是单线程的,执行时只能等待前一个任务执行完毕才会执行下一个,但当前一个任务耗时过长时,就会发生阻塞,如果所有任务都是同步执行的话,就可能会造成浏览器卡顿等情况,所以那些执行时间很长的任务都应该异步来处理.关于异步模式编程的实现方式可以具体去参考阮一峰老师的"),n("a",b,[s("Javascript 异步编程的 4 种方法"),t(a)])]),y])}const P=p(r,[["render",f],["__file","guanyuPromiseyuasyncdeersanshi.html.vue"]]);export{P as default};

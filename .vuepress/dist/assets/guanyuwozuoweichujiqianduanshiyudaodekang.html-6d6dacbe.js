import{_ as n,o as s,c as a,a as t}from"./app-ec29cce2.js";const e={},p=t(`<h3 id="_1-vuerouter-uncaught-in-promise" tabindex="-1"><a class="header-anchor" href="#_1-vuerouter-uncaught-in-promise" aria-hidden="true">#</a> 1.vuerouter Uncaught (in promise)</h3><p>这个是在用 vue-router 进行跳转时,重复点击了元素两次,控制台会报错,据翻看大佬的解释，vue-router ≥3.0 版本回调形式以及改成 promise api 的形式了，返回的是一个 promise，如果没有捕获到错误，控制台始终会出现如图的警告，针对于路由跳转相同的地址，目前的解决方案:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>大佬说是在 main.js 文件下加入如下代码：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>
<span class="token keyword">const</span> originalPush <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push
<span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：加入后亲测有效，确实不再提示这个错误了</p><h3 id="_2-css-设置多行溢出" tabindex="-1"><a class="header-anchor" href="#_2-css-设置多行溢出" aria-hidden="true">#</a> 2.css 设置多行溢出</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>单行溢出
<span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>
<span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>多行溢出
<span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
<span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
<span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>
<span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-刷新的方法" tabindex="-1"><a class="header-anchor" href="#_3-刷新的方法" aria-hidden="true">#</a> 3.刷新的方法:</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//用的是reload方法
window.location.reload()
//这种方法不好的方式是会刷新空白,用户体验很不好
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-css-鼠标-禁-用" tabindex="-1"><a class="header-anchor" href="#_4-css-鼠标-禁-用" aria-hidden="true">#</a> 4.css 鼠标 🈲 用</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token property">cursor</span><span class="token punctuation">:</span> default<span class="token punctuation">;</span>
<span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> //设置透明度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-get-方法与-post-方法区别" tabindex="-1"><a class="header-anchor" href="#_5-get-方法与-post-方法区别" aria-hidden="true">#</a> 5,get 方法与 post 方法区别</h2><h4 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> http</h4><p>超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。 HTTP 的工作方式是客户机与服务器之间的请求-应答协议。 web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。</p><h4 id="http-方法" tabindex="-1"><a class="header-anchor" href="#http-方法" aria-hidden="true">#</a> http 方法：</h4><p>HEAD: 与 GET 相同，但只返回 HTTP 报头，不返回文档主体 PUT: 上传指定的 URI 表示 DELETE: 删除指定资源 OPTIONS: 返回服务器支持的 HTTP 方法 CONNECT: 把请求连接转换到透明的 TCP/IP 通道 POST: 向指定的资源提交要被处理的数据</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的
POST /test/demo_form.asp HTTP/1.1
Host: w3schools.com
name1=value1&amp;name2=value2
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GET: 从指定的资源请求数据</p><h4 id="get-和-post-的区别" tabindex="-1"><a class="header-anchor" href="#get-和-post-的区别" aria-hidden="true">#</a> GET 和 POST 的区别</h4><ol><li><p>GET 请求可被缓存</p></li><li><p>GET 请求保留在浏览器历史记录中</p></li><li><p>GET 请求可被收藏为书签</p></li><li><p>GET 请求不应在处理敏感数据时使用</p></li><li><p>GET 请求有长度限制(2048 字符),IE 和 Safari 浏览器限制 2k;Opera 限制 4k;Firefox，Chrome 限制 8k</p></li><li><p>GET 请求只应当用于取回数据</p></li><li><p>POST 请求不会被缓存</p></li><li><p>POST 请求不会保留在浏览器历史记录中</p></li><li><p>POST 不能被收藏为书签</p></li><li><p>POST 请求对数据长度没有要求</p></li></ol><h2 id="_6-js-求平面两点之间的距离" tabindex="-1"><a class="header-anchor" href="#_6-js-求平面两点之间的距离" aria-hidden="true">#</a> 6.js 求平面两点之间的距离</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数据可以以数组方式存储，也可以是对象方式</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">distant</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dx <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Number</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
  <span class="token keyword">let</span> dy <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Number</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-css-禁止用户选择-👆" tabindex="-1"><a class="header-anchor" href="#_7-css-禁止用户选择-👆" aria-hidden="true">#</a> 7.css 禁止用户选择 👆</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">-khtml-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-for-in-与-for-of-方法" tabindex="-1"><a class="header-anchor" href="#_8-for-in-与-for-of-方法" aria-hidden="true">#</a> 8.for in 与 for of 方法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">find</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment">//for of中的num是完整的arr数组中的值</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">find</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment">//但是for in 中的num相当于下标,只有输出arr[num]才能获得数组中的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-数组去重" tabindex="-1"><a class="header-anchor" href="#_9-数组去重" aria-hidden="true">#</a> 9.数组去重</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//indexOf()方法</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\\
    <span class="token comment">//1,2,3,5,6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-如何提高首频加载速度" tabindex="-1"><a class="header-anchor" href="#_10-如何提高首频加载速度" aria-hidden="true">#</a> 10.如何提高首频加载速度</h2><blockquote><p>1.js 外联文件放到 body 底部，css 外联文件放到 head 内 2.http 静态资源尽量用多个子域名 3.服务器端提供 html 和 http 静态资源时最好开启 gzip 4.在 js,css,img 等资源响应的 http headers 里设置 expires,last-modified 5.尽量减少 http requests 的数量 6.js/css/html/img 资源压缩 7.使用 css spirtes，可以减少 img 请求次数 8.大图使用 lazyload 懒加载 9.避免 404，减少外联 js 10.减少 cookie 大小可以提高获得响应的时间 11.减少 dom elements 的数量 12.使用异步脚本，动态创建脚本</p></blockquote><h2 id="_11-简述一下你对-html-语义化的理解" tabindex="-1"><a class="header-anchor" href="#_11-简述一下你对-html-语义化的理解" aria-hidden="true">#</a> 11.简述一下你对 HTML 语义化的理解</h2><p>用正确的标签做正确的事情。 html 语义化让页面的内容结构化，便于对浏览器、搜索引擎解析; 即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的; 搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO; 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p><h2 id="_12-请描述一下-cookies-sessionstorage-和-localstorage-的区别" tabindex="-1"><a class="header-anchor" href="#_12-请描述一下-cookies-sessionstorage-和-localstorage-的区别" aria-hidden="true">#</a> 12.请描述一下 cookies，sessionStorage 和 localStorage 的区别</h2><p>cookie 是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。 cookie 数据始终在同源的 http 请求中携带（即使不需要），记会在浏览器和服务器间来回传递。 sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。 存储大小： cookie 数据大小不能超过 4k。 sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。 有期时间： localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； sessionStorage 数据在当前浏览器窗口关闭后自动删除。 cookie 设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭</p><h2 id="_13-css-overflow-属性" tabindex="-1"><a class="header-anchor" href="#_13-css-overflow-属性" aria-hidden="true">#</a> 13.css overflow 属性</h2><p>overflow 属性规定当内容溢出元素框时发生的事情。</p><blockquote><p>这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。</p></blockquote><p>值:</p><table><thead><tr><th>visible</th><th>默认值。内容不会被修剪，会呈现在元素框之外。</th></tr></thead><tbody><tr><td>hidden</td><td>内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td>scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><h2 id="让-overflow-scroll-平滑滚动" tabindex="-1"><a class="header-anchor" href="#让-overflow-scroll-平滑滚动" aria-hidden="true">#</a> 让 overflow:scroll 平滑滚动</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">-</span>webkit<span class="token operator">-</span>overflow<span class="token operator">-</span>scrolling<span class="token operator">:</span> touch<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_14-position-中的-relative-和-absolute-的定位原点问题" tabindex="-1"><a class="header-anchor" href="#_14-position-中的-relative-和-absolute-的定位原点问题" aria-hidden="true">#</a> 14.position 中的 relative 和 absolute 的定位原点问题</h2><p>absolute 生成绝对定位的元素，相对于值不为 static 的第一个父元素进行定位。 fixed （老 IE 不支持） 生成绝对定位的元素，相对于浏览器窗口进行定位。 relative 生成相对定位的元素，相对于其正常位置进行定位。 static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。 inherit 规定从父元素继承 position 属性的值</p><h2 id="_15-经常遇到的浏览器的兼容性有哪些-原因-解决方法是什么-常用-hack-的技巧" tabindex="-1"><a class="header-anchor" href="#_15-经常遇到的浏览器的兼容性有哪些-原因-解决方法是什么-常用-hack-的技巧" aria-hidden="true">#</a> 15.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用 hack 的技巧 ？</h2><ul><li>png24 位的图片在 iE6 浏览器上出现背景，解决方案是做成 PNG8.</li><li>浏览器默认的 margin 和 padding 不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。</li><li>IE6 双边距 bug:块属性标签 float 后，又有横行的 margin 情况下，在 ie6 显示 margin 比设置的大。 浮动 ie 产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;} 这种情况之下 IE 会产生 20px 的距离，解决方案是在 float 的标签样式控制中加入 ——*display:inline;将其转化为行内属性。(*这个符号只有 ie6 会识别) 渐进识别的方式，从总体中逐渐排除局部。 首先，巧妙的使用“\\9”这一标记，将 IE 游览器从所有情况中分离出来。 接着，再次使用“+”将 IE8 和 IE7、IE6 分离开来，这样 IE8 已经独立识别。 css .bb{ background-color:red;/<em>所有识别</em>/ background-color:#00deff\\9; /<em>IE6、7、8 识别</em>/ +background-color:#a200ff;/<em>IE6、7 识别</em>/ <em>background-color:#1e0bd1;/_IE6 识别</em>/ }</li><li>IE 下,可以使用获取常规属性的方法来获取自定义属性, 也可以使用 getAttribute()获取自定义属性; Firefox 下,只能使用 getAttribute()获取自定义属性。 解决方法:统一通过 getAttribute()获取自定义属性。</li><li>IE 下,even 对象有 x,y 属性,但是没有 pageX,pageY 属性; Firefox 下,event 对象有 pageX,pageY 属性,但是没有 x,y 属性。</li><li>解决方法：（条件注释）缺点是在 IE 浏览器下可能会增加额外的 HTTP 请求数。</li><li>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</li><li>超链接访问过后 hover 样式就不出现了 被点击访问过的超链接样式不在具有 hover 和 active 了解决方法是改变 CSS 属性的排列顺序: L-V-H-A : a:link {} a:visited {} a:hover {} a:active {}</li></ul><h2 id="_16-css-优化-提高性能" tabindex="-1"><a class="header-anchor" href="#_16-css-优化-提高性能" aria-hidden="true">#</a> 16.css 优化,提高性能</h2><p>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）； 如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）； 提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性; 使用预处理工具或构建工具（gulp 对 css 进行语法检查、自动补前缀、打包压缩、自动优雅降级）；</p><h2 id="_17-让页面里的字体变清晰-变细用-css-怎么做" tabindex="-1"><a class="header-anchor" href="#_17-让页面里的字体变清晰-变细用-css-怎么做" aria-hidden="true">#</a> 17.让页面里的字体变清晰，变细用 CSS 怎么做</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">-</span>webkit<span class="token operator">-</span>font<span class="token operator">-</span>smoothing<span class="token operator">:</span> antialiased<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_18-this-对象的理解" tabindex="-1"><a class="header-anchor" href="#_18-this-对象的理解" aria-hidden="true">#</a> 18.This 对象的理解</h2><blockquote><p>this 总是指向函数的直接调用者（而非间接调用者）； 如果有 new 关键字，this 指向 new 出来的那个对象； 在事件中，this 指向触发这个事件的对象，特殊的是，IE 中的 attachEvent 中的 this 总是指向全局对象 Window；</p></blockquote><h2 id="_19-什么是-window-对象-什么是-document-对象" tabindex="-1"><a class="header-anchor" href="#_19-什么是-window-对象-什么是-document-对象" aria-hidden="true">#</a> 19.什么是 window 对象? 什么是 document 对象</h2><blockquote><p>window 对象是指浏览器打开的窗口。 document 对象是 Documentd 对象（HTML 文档对象）的一个只读引用，window 对象的一个属性。</p></blockquote><h2 id="_20-什么是闭包-closure-为什么要用它" tabindex="-1"><a class="header-anchor" href="#_20-什么是闭包-closure-为什么要用它" aria-hidden="true">#</a> 20.什么是闭包（closure），为什么要用它？</h2><blockquote><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部</p></blockquote><h2 id="_21-如何判断一个对象谁否属于某个类" tabindex="-1"><a class="header-anchor" href="#_21-如何判断一个对象谁否属于某个类" aria-hidden="true">#</a> 21.如何判断一个对象谁否属于某个类</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</span>

<span class="token comment">// 判断对象类型最好的方式</span>
<span class="token comment">// 对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。</span>
<span class="token comment">//而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [object String]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [object Number]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// [object Boolean]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Symbol]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// [object Undefined]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// [object Null]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Function]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Date]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [object Array]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object RegExp]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Error]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token comment">// [object HTMLDocument]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment">//[object global] window 是全局对象 global 的引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-new-一个对象的过程" tabindex="-1"><a class="header-anchor" href="#_22-new-一个对象的过程" aria-hidden="true">#</a> 22.new 一个对象的过程</h2><p>1、创建一个空对象，并且 <strong>this</strong> 变量引用该对象，同时还继承了该函数的原型。 2、属性和方法被加入到 <strong>this</strong> 引用的对象中。 3、新创建的对象由 <strong>this</strong> 所引用，并且最后隐式的返回 <strong>this</strong> 。</p><h2 id="_23-在-vue-中的遍历方法-v-for-控制循环次数的方法" tabindex="-1"><a class="header-anchor" href="#_23-在-vue-中的遍历方法-v-for-控制循环次数的方法" aria-hidden="true">#</a> 23.在 Vue 中的遍历方法 v-for 控制循环次数的方法</h2><p><strong>1.截取循环的数据</strong>     v-for=&quot;(item,index) in domainList.slice(0, 2)&quot;      用这样的方法可以截取循环的数据长度，从而控制循环的次数 <strong>2.通过 v-if 来控制</strong>      v-for=&quot;(item,index) in domainList&quot; v-if=&quot;index&lt;3&quot;      在标签下紧跟 v-if 来进行控制，这里是用索引来进行控制的，所以循环的时候记得把 index 这个参数加到 v-for 循环中。</p><h2 id="_24-箭头函数" tabindex="-1"><a class="header-anchor" href="#_24-箭头函数" aria-hidden="true">#</a> 24.箭头函数</h2><p>对于箭头函数，<code>this</code>  关键字指向的是它当前周围作用域（简单来说是包含箭头函数的常规函数，如果没有常规函数的话就是全局对象），这个行为和常规函数不同。</p><h2 id="_25-获取接口数据的定义的数组" tabindex="-1"><a class="header-anchor" href="#_25-获取接口数据的定义的数组" aria-hidden="true">#</a> 25.获取接口数据的定义的数组</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">course</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">public_assesses</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">course_contents</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">public_collects</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">introduction</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在获取数据时，由于接口返回的数据嵌套过多，导致页面渲染报错，在定义数组保存接口数据时，可以定义好要接受的数据的“模版”，或者说把要使用的数据拿出来单独赋值</p><h2 id="_26-vue-router-跳转页面时传参成功但是页面没有刷新" tabindex="-1"><a class="header-anchor" href="#_26-vue-router-跳转页面时传参成功但是页面没有刷新" aria-hidden="true">#</a> 26.vue-router 跳转页面时传参成功但是页面没有刷新</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;$route&#39;</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 watch 监听 router 属性是否有变化，然后决定是否重新刷新页面</p><h2 id="_27-设置默认显示的子路由" tabindex="-1"><a class="header-anchor" href="#_27-设置默认显示的子路由" aria-hidden="true">#</a> 27.设置默认显示的子路由</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/home_page/index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;home_page&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;index_cntent&#39;</span><span class="token punctuation">,</span><span class="token comment">//用redirect指出默认显示的子路由</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about_menu&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/menu/about_menu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;about_menu&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/dervice_menu&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/menu/dervice_menu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;dervice_menu&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/product_menu&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/menu/product_menu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;product_menu&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/service_menu&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/menu/service_menu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;service_menu&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/index_cntent&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/menu/content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;index_cntent&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_28-关于-vue-warn-的警告解决" tabindex="-1"><a class="header-anchor" href="#_28-关于-vue-warn-的警告解决" aria-hidden="true">#</a> 28 关于 vue warn 的警告解决</h2><p>一般出现 vue warn 的时候一般是 vue 数据渲染出错，绑定的某个值可能赋值出错，像是给了 undefined，或者是原本是图片地址却给了个字符串之类错误，往往导致这方面的错误的时候，提示里一般没有相关文件具体到哪一行那个语法出错，但是会提示了是那个文件，去文件里面逐一排查就好</p><h2 id="_29-最简单的方式实现前端下载功能-window-location" tabindex="-1"><a class="header-anchor" href="#_29-最简单的方式实现前端下载功能-window-location" aria-hidden="true">#</a> 29.最简单的方式实现前端下载功能（window.location）</h2><p>用<code>window.locatio.href=“xxxx?”+（其他字段）+&#39;&amp;(其他字段)&#39;</code>的方式可以实现打开新的窗口下载文件，前提是后端给返回文件的下载地址，默认打开地址的话像是图片会直接预览</p><h2 id="_30-textarea-禁止拖动-固定宽高" tabindex="-1"><a class="header-anchor" href="#_30-textarea-禁止拖动-固定宽高" aria-hidden="true">#</a> 30.textarea 禁止拖动,固定宽高</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>resize: none;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_31-控制-v-for-循环的次数" tabindex="-1"><a class="header-anchor" href="#_31-控制-v-for-循环的次数" aria-hidden="true">#</a> 31.控制 v-for 循环的次数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、通过html的标签里面v<span class="token operator">-</span><span class="token keyword">if</span>对超出范围的进行隐藏

<span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(item,index) in courselist&quot;</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;index &lt; 6&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&#39;index&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token number">2</span>、通过sclie截取数组的长度控制循环的次数

<span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(item,index) in courselist.slice(0,6)&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;index&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-cannot-read-property-createelement-of-undefined" tabindex="-1"><a class="header-anchor" href="#_32-cannot-read-property-createelement-of-undefined" aria-hidden="true">#</a> 32.Cannot read property &#39;$createElement&#39; of undefined</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cannot read property <span class="token string">&#39;$createElement&#39;</span> <span class="token keyword">of</span> <span class="token keyword">undefined</span>
一般是vue router报出错误<span class="token punctuation">,</span>一般是 在写 component 时 写成了 components
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_33-click-native" tabindex="-1"><a class="header-anchor" href="#_33-click-native" aria-hidden="true">#</a> 33.@click.native</h2><p>用于 <code>vue 2.x版本</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@click<span class="token punctuation">.</span>native 是vue在绑定点击事件时用到的指令<span class="token punctuation">,</span>因为要给组件加上点击事件<span class="token punctuation">,</span>所以要加上<span class="token punctuation">.</span>native
 <span class="token function">子组件内部处理click事件然后向外发送click事件：$emit</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">.</span>fn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_34-如何用-css-绘制一个点或者圆形" tabindex="-1"><a class="header-anchor" href="#_34-如何用-css-绘制一个点或者圆形" aria-hidden="true">#</a> 34.如何用 css 绘制一个点或者圆形</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">i</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_35-判断一个字符串是不是日期" tabindex="-1"><a class="header-anchor" href="#_35-判断一个字符串是不是日期" aria-hidden="true">#</a> 35.判断一个字符串是不是日期</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token string">&#39;2020-01-01&#39;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","guanyuwozuoweichujiqianduanshiyudaodekang.html.vue"]]);export{r as default};
